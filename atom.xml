<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nautilu_Nemo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://log.xiaohaoming.com/"/>
  <updated>2018-07-13T17:49:19.530Z</updated>
  <id>http://log.xiaohaoming.com/</id>
  
  <author>
    <name>XIAOHAO</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>快速排序</title>
    <link href="http://log.xiaohaoming.com//2018/07/algorithm-863-AllNodesDistanceKinBinaryTree.html"/>
    <id>http://log.xiaohaoming.com//2018/07/algorithm-863-AllNodesDistanceKinBinaryTree.html</id>
    <published>2018-07-13T17:49:19.530Z</published>
    <updated>2018-07-13T17:49:19.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="863-All-Nodes-Distance-K-in-Binary-Tree"><a href="#863-All-Nodes-Distance-K-in-Binary-Tree" class="headerlink" title="863. All Nodes Distance K in Binary Tree"></a>863. All Nodes Distance K in Binary Tree</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a><a href="https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/description/" target="_blank" rel="noopener">描述</a></h3><p>我们将会给予一个二叉树<a href="二叉树根节点为root">^1</a>，一个<code>target</code>结点，和一个整数值<code>K</code>。</p><p>返回距离<code>target</code>结点为<code>K</code>路径长度的所有结点的值的集合。答案能够返回以任何顺序。</p><p><code>We are given a binary tree (with root node root), a target node, and an integer value K.Return a list of the values of all nodes that have a distance K from the target node.  The answer can be returned in any order.</code></p><h3 id="是否能够解决"><a href="#是否能够解决" class="headerlink" title="是否能够解决"></a>是否能够解决</h3><p>不能，通过查看此题的<code>solution</code>和<code>discuss</code>的大神操作，查看解题思路和代码<code>snippet</code>，摘录以下：</p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ul><li>先遍历结点，采用中序遍历递归</li><li>如果发现<code>target</code>结点，遍历子结点添加距离<code>target</code>路径为K的结点的值,采用中序遍历递归的回溯作用查找距离<code>target</code>路径为K的结点的值</li><li>如果没有发现<code>target</code>结点，递归直至结点为<code>null</code></li></ul><h4 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">distanceK</span><span class="params">(TreeNode&lt;T&gt; root, TreeNode&lt;T&gt; target, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span> || target == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">        preOrder(root, target, list, K);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">preOrder</span><span class="params">(TreeNode&lt;T&gt; root, TreeNode&lt;T&gt; target, List&lt;T&gt; list, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (root.val.equals(target.val)) &#123;</span><br><span class="line">        <span class="comment">//k == 0 的情况</span></span><br><span class="line">        <span class="comment">//当K为0时，只存在它本身，没必要在遍历</span></span><br><span class="line">        <span class="keyword">if</span> (K == <span class="number">0</span>) &#123;</span><br><span class="line">            list.add(root.val);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        getNodesFromChildren(root.left, list, K - <span class="number">1</span>);</span><br><span class="line">        getNodesFromChildren(root.right, list, K - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//回溯作用，能够回溯到祖先和祖先的右孩子</span></span><br><span class="line">        <span class="comment">//在找到target结点后，此时ret返回值大于0，所以开始进行上述回溯操作</span></span><br><span class="line">        <span class="keyword">int</span> ret = preOrder(root.left, target, list, K);</span><br><span class="line">        <span class="keyword">if</span> (ret &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//K大于等于1的情况</span></span><br><span class="line">            <span class="keyword">if</span> (ret == K) &#123;</span><br><span class="line">                list.add(root.val);</span><br><span class="line">                <span class="keyword">return</span> ret + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            getNodesFromChildren(root.right, list, K - (ret + <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">return</span> ret + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//回溯作用，能够回溯到祖先和祖先的右孩子</span></span><br><span class="line">        ret = preOrder(root.left, target, list, K);</span><br><span class="line">        <span class="keyword">if</span> (ret &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ret == K) &#123;</span><br><span class="line">                list.add(root.val);</span><br><span class="line">                <span class="keyword">return</span> ret + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            getNodesFromChildren(root.left, list, K - (ret + <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">return</span> ret + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root（1）满足root.val==target.val （2）祖先结点 K=K-向上回溯祖先的数目</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list  添加满足值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> K  距离K的路径</span></span><br><span class="line"><span class="comment"> * 实现根据以树根节点root进行中序遍历查找距离K路径的结点，并把满足的结点的值添加进list</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getNodesFromChildren</span><span class="params">(TreeNode&lt;T&gt; root, List&lt;T&gt; list, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (K == <span class="number">0</span>) &#123;</span><br><span class="line">        list.add(root.val);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    getNodesFromChildren(root.left, list, K - <span class="number">1</span>);</span><br><span class="line">    getNodesFromChildren(root.right, list, K - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><h4 id="Annotate-Parent"><a href="#Annotate-Parent" class="headerlink" title="Annotate Parent"></a><a href="https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/solution/" target="_blank" rel="noopener">Annotate Parent</a></h4><p><strong>Intuition</strong></p><p>If we know the parent of every node <code>x</code>, we know all nodes that are distance <code>1</code> from <code>x</code>. We can then perform a breadth first search from the <code>target</code> node to find the answer.</p><p><strong>Algorithm</strong></p><p>We first do a depth first search where we annotate every node with information about it’s parent.</p><p>After, we do a breadth first search to find all nodes a distance <code>K</code> from the <code>target</code>.</p><h4 id="步骤：-1"><a href="#步骤：-1" class="headerlink" title="步骤："></a>步骤：</h4><ul><li><p>深度搜索注释所有子结点的父亲结点，根节点的父亲结点为<code>null</code></p></li><li><p>以<code>target</code>结点为首层，递增路径，每次队列存放的结点<strong>只满足</strong>递增路径深度为相同列<a href="如何区分每次队列存放的结点**只满足**递增路径深度为相同？采用在递增路径深度相同的队列中添加null标志">^2</a></p></li><li><p>直至递增路径等于<code>k</code>路径长度，此时队列中的存放的结点即为满足元素</p></li></ul><h4 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">distanceK1</span><span class="params">(TreeNode&lt;T&gt; root, TreeNode&lt;T&gt; target, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">    parents = <span class="keyword">new</span> HashMap();</span><br><span class="line">    <span class="comment">//dfs(root, parents);</span></span><br><span class="line">    dfs(root, <span class="keyword">null</span>);</span><br><span class="line">    List&lt;TreeNode&lt;T&gt;&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    queue.add(<span class="keyword">null</span>);</span><br><span class="line">    queue.add(target);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//防止回溯到已经遍历过的结点</span></span><br><span class="line">    Set&lt;TreeNode&lt;T&gt;&gt; seen = <span class="keyword">new</span> HashSet();</span><br><span class="line">    seen.add(<span class="keyword">null</span>);</span><br><span class="line">    seen.add(target);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> dist = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//移除队列的首元素（first）</span></span><br><span class="line">        TreeNode&lt;T&gt; node = ((LinkedList&lt;TreeNode&lt;T&gt;&gt;) queue).poll();</span><br><span class="line">        <span class="comment">//每次出队元素为null而且此时dist长度不等于k时，路径进1</span></span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dist == K) &#123;</span><br><span class="line">                List&lt;T&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (TreeNode&lt;T&gt; t : queue)</span><br><span class="line">                    ans.add(t.val);</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">            ++dist;</span><br><span class="line">            ((LinkedList&lt;TreeNode&lt;T&gt;&gt;) queue).offer(<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!seen.contains(node.left)) &#123;</span><br><span class="line">                seen.add(node.left);</span><br><span class="line">                <span class="comment">//添加元素到尾(tails)</span></span><br><span class="line">                ((LinkedList&lt;TreeNode&lt;T&gt;&gt;) queue).offer(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!seen.contains(node.right)) &#123;</span><br><span class="line">                seen.add(node.right);</span><br><span class="line">                ((LinkedList&lt;TreeNode&lt;T&gt;&gt;) queue).offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            TreeNode&lt;T&gt; parent = parents.get(node);</span><br><span class="line">            <span class="keyword">if</span> (!seen.contains(parent)) &#123;</span><br><span class="line">                seen.add(parent);</span><br><span class="line">                ((LinkedList&lt;TreeNode&lt;T&gt;&gt;) queue).offer(parent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="完整测试代码"><a href="#完整测试代码" class="headerlink" title="完整测试代码"></a>完整测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> leetcode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.nashorn.api.tree.Tree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任何实现equals类且都可以进行深度为K路径长度的检索</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 泛型类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BTAllNodeDistanceK</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T dist[];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> controlDiVa = <span class="number">0</span>;</span><br><span class="line">    List&lt;T&gt; list;</span><br><span class="line">    <span class="comment">//错误使用 Map&lt;TreeNode&lt;T&gt; node,TreeNode&lt;T&gt; parents&gt; parents;</span></span><br><span class="line">    Map&lt;TreeNode&lt;T&gt;, TreeNode&lt;T&gt;&gt; parents;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Definition for a binary tree node.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        T val;</span><br><span class="line">        TreeNode&lt;T&gt; left;</span><br><span class="line">        TreeNode&lt;T&gt; right;</span><br><span class="line"></span><br><span class="line">        TreeNode(T x) &#123;</span><br><span class="line">            val = x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BTAllNodeDistanceK</span><span class="params">(T sour[])</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generat d constructor stub</span></span><br><span class="line">        <span class="keyword">this</span>.dist = sour;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">distanceK</span><span class="params">(TreeNode&lt;T&gt; root, TreeNode&lt;T&gt; target, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span> || target == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">        preOrder(root, target, list, K);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">preOrder</span><span class="params">(TreeNode&lt;T&gt; root, TreeNode&lt;T&gt; target, List&lt;T&gt; list, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.val.equals(target.val)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (K == <span class="number">0</span>) &#123;</span><br><span class="line">                list.add(root.val);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            getNodesFromChildren(root.left, list, K - <span class="number">1</span>);</span><br><span class="line">            getNodesFromChildren(root.right, list, K - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//回溯作用，能够回溯到祖先和祖先的右孩子</span></span><br><span class="line">            <span class="keyword">int</span> ret = preOrder(root.left, target, list, K);</span><br><span class="line">            <span class="keyword">if</span> (ret &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ret == K) &#123;</span><br><span class="line">                    list.add(root.val);</span><br><span class="line">                    <span class="keyword">return</span> ret + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                getNodesFromChildren(root.right, list, K - (ret + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">return</span> ret + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//回溯作用，能够回溯到祖先和祖先的右孩子</span></span><br><span class="line">            ret = preOrder(root.left, target, list, K);</span><br><span class="line">            <span class="keyword">if</span> (ret &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ret == K) &#123;</span><br><span class="line">                    list.add(root.val);</span><br><span class="line">                    <span class="keyword">return</span> ret + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                getNodesFromChildren(root.left, list, K - (ret + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">return</span> ret + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root（1）满足root.val==target.val （2）祖先结点 K=K-向上回溯祖先的数目</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list                          添加满足值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> K                             距离K的路径</span></span><br><span class="line"><span class="comment">     *                                      实现根据以树根节点root进行中序遍历查找距离K路径的结点，并把满足的结点的值添加进list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getNodesFromChildren</span><span class="params">(TreeNode&lt;T&gt; root, List&lt;T&gt; list, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (K == <span class="number">0</span>) &#123;</span><br><span class="line">            list.add(root.val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        getNodesFromChildren(root.left, list, K - <span class="number">1</span>);</span><br><span class="line">        getNodesFromChildren(root.right, list, K - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创造一颗二叉树</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tN</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> tN指向引用和调用函数root值引用不同，所以需要返回值使调用函数的root引用地址保持和tN引用地址一样</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode&lt;T&gt; <span class="title">createTree</span><span class="params">(TreeNode&lt;T&gt; tN)</span> </span>&#123;</span><br><span class="line">        T tem = dist[controlDiVa];</span><br><span class="line">        controlDiVa++;</span><br><span class="line">        <span class="keyword">if</span> (tem == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> tN = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tN = <span class="keyword">new</span> TreeNode&lt;T&gt;();</span><br><span class="line">            tN.val = tem;</span><br><span class="line">            tN.left = createTree(tN.left);</span><br><span class="line">            tN.right = createTree(tN.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tN;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现中序排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 根结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(TreeNode&lt;T&gt; root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inOrder(root.left);</span><br><span class="line">        System.out.print(root.val + <span class="string">" "</span>);</span><br><span class="line">        inOrder(root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/****************************第一种方法查找********************************</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         int k=2;</span></span><br><span class="line"><span class="comment">         //必须满足上述条件的数组才能使用createTree方法建立一颗二叉树</span></span><br><span class="line"><span class="comment">         Integer[] sour= &#123;1,2,3,null,null,null,134,5,null,null,6,null,null&#125;;</span></span><br><span class="line"><span class="comment">         **</span></span><br><span class="line"><span class="comment">         *                            1</span></span><br><span class="line"><span class="comment">         *                     ////////\\\\\\\\</span></span><br><span class="line"><span class="comment">         *                    2               134</span></span><br><span class="line"><span class="comment">         *                ////\\\\         ////\\\\</span></span><br><span class="line"><span class="comment">         *               3       null      5       6</span></span><br><span class="line"><span class="comment">         *             //\\              //\\     //\\</span></span><br><span class="line"><span class="comment">         *         null   null        null  null  null null</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         TreeNode&lt;Integer&gt; root=new TreeNode&lt;Integer&gt;();</span></span><br><span class="line"><span class="comment">         TreeNode&lt;Integer&gt; target=new TreeNode&lt;Integer&gt;();</span></span><br><span class="line"><span class="comment">         target.val=2;</span></span><br><span class="line"><span class="comment">         target.left=null;</span></span><br><span class="line"><span class="comment">         target.right=null;</span></span><br><span class="line"><span class="comment">         BTAllNodeDistanceK&lt;Integer&gt; a=new BTAllNodeDistanceK&lt;Integer&gt;(sour);</span></span><br><span class="line"><span class="comment">         root=a.createTree(root);</span></span><br><span class="line"><span class="comment">         a.distanceK(root,target,k);</span></span><br><span class="line"><span class="comment">         Iterator&lt;Integer&gt; ite=a.list.iterator();</span></span><br><span class="line"><span class="comment">         System.out.println("距离路径为"+k+"的值为：");</span></span><br><span class="line"><span class="comment">         while(ite.hasNext()) &#123;</span></span><br><span class="line"><span class="comment">         System.out.println(ite.next());</span></span><br><span class="line"><span class="comment">         &#125;</span></span><br><span class="line"><span class="comment">         ******************************************************************/</span></span><br><span class="line">        <span class="comment">//必须满足上述条件的数组才能使用createTree1方法建立一颗二叉树</span></span><br><span class="line">        Integer[] sour = &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">7</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        <span class="comment">/* 必须满足的树的结构</span></span><br><span class="line"><span class="comment">                                       3</span></span><br><span class="line"><span class="comment">                               //////// \\\\\\\\</span></span><br><span class="line"><span class="comment">                              5                 1</span></span><br><span class="line"><span class="comment">                          //// \\\\         //// \\\\</span></span><br><span class="line"><span class="comment">                         6          2      0         8</span></span><br><span class="line"><span class="comment">                       // \\      // \\</span></span><br><span class="line"><span class="comment">                    null   null  7     4</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        TreeNode&lt;Integer&gt; root;</span><br><span class="line">        TreeNode&lt;Integer&gt; target;</span><br><span class="line">        BTAllNodeDistanceK&lt;Integer&gt; a = <span class="keyword">new</span> BTAllNodeDistanceK&lt;&gt;(sour);</span><br><span class="line">        root = a.createTree1();</span><br><span class="line">        System.out.println(<span class="string">"1.测试是否能够生成二叉树："</span>);</span><br><span class="line">        a.inOrder(root);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"2.测试是否能够查找到在指定树中指定树结点值的结点："</span>);</span><br><span class="line">        target = a.dfsForTarget(root, <span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"target.val:"</span> + target.val);</span><br><span class="line">        <span class="keyword">if</span> (target.left != <span class="keyword">null</span>)</span><br><span class="line">            System.out.println(<span class="string">"if target.left != null target.left.val: "</span>+target.left.val);</span><br><span class="line">        <span class="keyword">if</span> (target.right != <span class="keyword">null</span>)</span><br><span class="line">            System.out.println(<span class="string">"if target.right != null target.left.val: "</span>+target.right.val);</span><br><span class="line">        a.list=a.distanceK1(root,target,<span class="number">2</span>);</span><br><span class="line">        Iterator&lt;Integer&gt; ite=a.list.iterator();</span><br><span class="line">        System.out.println(<span class="string">"距离路径为"</span>+<span class="number">2</span>+<span class="string">"的值为："</span>);</span><br><span class="line">        <span class="keyword">while</span>(ite.hasNext()) &#123;</span><br><span class="line">            System.out.println(ite.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">distanceK1</span><span class="params">(TreeNode&lt;T&gt; root, TreeNode&lt;T&gt; target, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        parents = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="comment">//dfs(root, parents);</span></span><br><span class="line">        dfs(root, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;TreeNode&lt;T&gt;&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.add(<span class="keyword">null</span>);</span><br><span class="line">        queue.add(target);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//防止回溯到已经遍历过的结点</span></span><br><span class="line">        Set&lt;TreeNode&lt;T&gt;&gt; seen = <span class="keyword">new</span> HashSet();</span><br><span class="line">        seen.add(<span class="keyword">null</span>);</span><br><span class="line">        seen.add(target);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> dist = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//移除队列的首元素（first）</span></span><br><span class="line">            TreeNode&lt;T&gt; node = ((LinkedList&lt;TreeNode&lt;T&gt;&gt;) queue).poll();</span><br><span class="line">            <span class="comment">//每次null路径进1</span></span><br><span class="line">            <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dist == K) &#123;</span><br><span class="line">                    List&lt;T&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                    <span class="keyword">for</span> (TreeNode&lt;T&gt; t : queue)</span><br><span class="line">                        ans.add(t.val);</span><br><span class="line">                    <span class="keyword">return</span> ans;</span><br><span class="line">                &#125;</span><br><span class="line">                ++dist;</span><br><span class="line">                ((LinkedList&lt;TreeNode&lt;T&gt;&gt;) queue).offer(<span class="keyword">null</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!seen.contains(node.left)) &#123;</span><br><span class="line">                    seen.add(node.left);</span><br><span class="line">                    <span class="comment">//添加元素到尾(tails)</span></span><br><span class="line">                    ((LinkedList&lt;TreeNode&lt;T&gt;&gt;) queue).offer(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!seen.contains(node.right)) &#123;</span><br><span class="line">                    seen.add(node.right);</span><br><span class="line">                    ((LinkedList&lt;TreeNode&lt;T&gt;&gt;) queue).offer(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">                TreeNode&lt;T&gt; parent = parents.get(node);</span><br><span class="line">                <span class="keyword">if</span> (!seen.contains(parent)) &#123;</span><br><span class="line">                    seen.add(parent);</span><br><span class="line">                    ((LinkedList&lt;TreeNode&lt;T&gt;&gt;) queue).offer(parent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创造一颗二叉树,存储值的数组需要满足特定结构</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> root</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode&lt;T&gt; <span class="title">createTree1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j = dist.length;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode&lt;T&gt; tN = <span class="keyword">new</span> TreeNode&lt;&gt;();</span><br><span class="line">        tN.val = dist[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        List&lt;TreeNode&lt;T&gt;&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        queue.add(tN);</span><br><span class="line">        <span class="comment">//申明在作用域的上一层</span></span><br><span class="line">        TreeNode&lt;T&gt; parent;</span><br><span class="line">        TreeNode&lt;T&gt; tem;</span><br><span class="line">        <span class="keyword">while</span> ((<span class="number">2</span> * i - <span class="number">1</span>) &lt; j) &#123;</span><br><span class="line"><span class="comment">/***********************错误代码*************************************</span></span><br><span class="line"><span class="comment"> *  parent不可能为null，因为每次可进入队列的元素必然new TreeNode&lt;T&gt;一次</span></span><br><span class="line"><span class="comment"> *******************************************************************/</span></span><br><span class="line"><span class="comment">//            parent=((LinkedList&lt;TreeNode&lt;T&gt;&gt;) queue).poll();</span></span><br><span class="line"><span class="comment">//            if(parent==null)</span></span><br><span class="line"><span class="comment">//                throw new NullPointerException("不存在parent为null的结点");</span></span><br><span class="line"><span class="comment">//            tem = new TreeNode&lt;&gt;();</span></span><br><span class="line"><span class="comment">//            tem.val = dist[2 * i - 1];</span></span><br><span class="line"><span class="comment">//            parent.left = tem;</span></span><br><span class="line"><span class="comment">//            ((LinkedList&lt;TreeNode&lt;T&gt;&gt;) queue).offer(tem);</span></span><br><span class="line"><span class="comment">/***********************正确代码*************************************</span></span><br><span class="line"><span class="comment"> *  添加数组元素是否为null的判定</span></span><br><span class="line"><span class="comment"> *******************************************************************/</span></span><br><span class="line"></span><br><span class="line">            parent = ((LinkedList&lt;TreeNode&lt;T&gt;&gt;) queue).poll();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (parent == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"不存在父亲为null的结点"</span>);</span><br><span class="line">            <span class="keyword">if</span> (dist[<span class="number">2</span> * i - <span class="number">1</span>] == <span class="keyword">null</span>)</span><br><span class="line">                ((LinkedList&lt;TreeNode&lt;T&gt;&gt;) queue).offer(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                tem = <span class="keyword">new</span> TreeNode&lt;&gt;();</span><br><span class="line">                tem.val = dist[<span class="number">2</span> * i - <span class="number">1</span>];</span><br><span class="line">                parent.left = tem;</span><br><span class="line">                ((LinkedList&lt;TreeNode&lt;T&gt;&gt;) queue).offer(tem);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">2</span> * i &lt; j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dist[<span class="number">2</span> * i] == <span class="keyword">null</span>)</span><br><span class="line">                    ((LinkedList&lt;TreeNode&lt;T&gt;&gt;) queue).offer(<span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    tem = <span class="keyword">new</span> TreeNode&lt;&gt;();</span><br><span class="line">                    tem.val = dist[<span class="number">2</span> * i];</span><br><span class="line">                    parent.right = tem;</span><br><span class="line">                    ((LinkedList&lt;TreeNode&lt;T&gt;&gt;) queue).offer(tem);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tN;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * :leetcode提供解决方案</span></span><br><span class="line"><span class="comment">     * 把所有结点的父结点标记</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node   孩子结点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent 父亲结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode&lt;T&gt; node, TreeNode&lt;T&gt; parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            parents.put(node, parent);</span><br><span class="line">            dfs(node.left, node);</span><br><span class="line">            dfs(node.right, node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * :自己模仿写的</span></span><br><span class="line"><span class="comment">     * 把所有结点的父结点标记</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root_    父结点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parents_ 以孩子结点为key,父亲结点为value的标记集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(TreeNode&lt;T&gt; root_, Map parents_)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//排除第一次进入时出现root_为null的情况</span></span><br><span class="line">        <span class="keyword">if</span> (root_ == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//递归基</span></span><br><span class="line">        <span class="keyword">if</span> (root_.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            parents_.put(root_.left, root_);</span><br><span class="line">            dfs1(root_.left, parents_);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root_.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            parents_.put(root_.right, root_);</span><br><span class="line">            dfs1(root_.right, parents_);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode&lt;T&gt; <span class="title">dfsForTarget</span><span class="params">(TreeNode&lt;T&gt; root, T val)</span> </span>&#123;</span><br><span class="line">        TreeNode&lt;T&gt; tem;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.val.equals(val)) &#123;</span><br><span class="line">                <span class="keyword">return</span> root;</span><br><span class="line">            &#125;</span><br><span class="line">            tem = dfsForTarget(root.left, val);</span><br><span class="line">            <span class="keyword">if</span> (tem != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> tem;</span><br><span class="line">            &#125;</span><br><span class="line">            tem = dfsForTarget(root.right, val);</span><br><span class="line">            <span class="keyword">if</span> (tem != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> tem;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;863-All-Nodes-Distance-K-in-Binary-Tree&quot;&gt;&lt;a href=&quot;#863-All-Nodes-Distance-K-in-Binary-Tree&quot; class=&quot;headerlink&quot; title=&quot;863. All Nodes
      
    
    </summary>
    
      <category term="algorithm" scheme="http://log.xiaohaoming.com/categories/algorithm/"/>
    
    
      <category term="quickSort" scheme="http://log.xiaohaoming.com/tags/quickSort/"/>
    
      <category term="algorithm" scheme="http://log.xiaohaoming.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>问题解决</title>
    <link href="http://log.xiaohaoming.com//2018/07/extension-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3.html"/>
    <id>http://log.xiaohaoming.com//2018/07/extension-问题解决.html</id>
    <published>2018-07-09T16:49:57.844Z</published>
    <updated>2018-07-09T16:49:57.844Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="1-导入-jar文件可执行文件与eclipse需要重写遇到did-not-contain-the-main-type的原因"><a href="#1-导入-jar文件可执行文件与eclipse需要重写遇到did-not-contain-the-main-type的原因" class="headerlink" title="(1) 导入.jar文件可执行文件与eclipse需要重写遇到did not contain the main type的原因"></a>(1) 导入.jar文件可执行文件与eclipse需要重写遇到did not contain the main type的原因</h4><pre><code>导入后实际为普通文件形式，不属于src文件，不能运行，*.jar里面的库重新build path导入，其它.java复制进去</code></pre><p><a href="https://stackoverflow.com/questions/16225177/error-selection" target="_blank" rel="noopener">其他可能造成的原因请看</a></p><h4 id="2-未在jdk中找到javax-xml-blind（classnotFoundException"><a href="#2-未在jdk中找到javax-xml-blind（classnotFoundException" class="headerlink" title="(2) 未在jdk中找到javax.xml.blind（classnotFoundException)"></a>(2) 未在jdk中找到javax.xml.blind（classnotFoundException)</h4><p><code>jdk9.0.1</code>已经抛弃<code>javax.xml.blind</code>包，从<a href="https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api/2.3.0" target="_blank" rel="noopener">maven</a>导入找到要导入的包及依赖库描述，建立一个maven项目artifact，在<code>pom.xml</code>中加入依赖<code>dependency</code><br><a href="https://stackoverflow.com/questions/43574426/how-to-resolve-java-lang-noclassdeffounderror-javax-xml-bind-jaxbexception-in-j/48136912#48136912" target="_blank" rel="noopener">具体参考</a></p><h4 id="3-WARNING-An-illegal-reflective-access-operation-has-occurred"><a href="#3-WARNING-An-illegal-reflective-access-operation-has-occurred" class="headerlink" title="(3) WARNING: An illegal reflective access operation has occurred"></a>(3) WARNING: An illegal reflective access operation has occurred</h4><p><code>WARNING: Illegal reflective access by com.sun.xml.bind.v2.runtime.reflect.opt.Injector (file:/C:/Users/13612/.m2/repository/com/sun/xml/bind/jaxb-impl/2.3.0/jaxb-impl-2.3.0.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)</code></p><ul><li>WARNING: Please consider reporting this to the   maintainercom.sun.xml.bind.v2.runtime.reflect.opt.Injector</li><li>WARNING: Use –illegal-access=warn to enable warnings of further illegal reflective access operations</li><li><p>WARNING: All illegal access operations will be denied in a future release<br><code>原因：jdk9加入的安全</code><br><code>解决方案</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//屏蔽掉非法反射访问，JDK9</span></span><br><span class="line">      StudentMessagHandler.disableWarning();<span class="comment">//主要这个语句</span></span><br><span class="line">      StudentMessagHandler smh=<span class="keyword">new</span> StudentMessagHandler(</span><br><span class="line">      <span class="string">"C:\\data\\（含预警1.0）大一、大二、大三通讯录\\"</span></span><br><span class="line">      + <span class="string">"（含预警）大一、大二、大三通讯录\\学生通讯录\\16级\\160801.xlsx"</span>);</span><br><span class="line">      <span class="keyword">for</span>(String str:smh.randomMacth(<span class="number">5</span>)) &#123;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p> <code>2: StackOverflow查找问题解决方案</code></p></li></ul><h4 id="4-405-method-not-allowed"><a href="#4-405-method-not-allowed" class="headerlink" title="(4) 405 method not allowed"></a>(4) 405 method not allowed</h4><p><code>原因</code></p><p><code>在尝试访问endpoint使用浏览器工具，然而，什么嘛时候打印资源URL在浏览器框，是正在执行request请求，这和是默认的因此，浏览器不能给你灵活的测试REST API，你只能执行GET请求。</code></p><p><code>解决方案</code></p><p><code>为了测试rest API，你应该使用正确的工具。有下列几种：CURL,PostMan等</code></p><p><a href="https://stackoverflow.com/questions/35839547/how-to-perform-post-requests-to-a-rest-webservice" target="_blank" rel="noopener">具体请看</a></p><h4 id="5-curl安装"><a href="#5-curl安装" class="headerlink" title="(5) curl安装"></a>(5) curl安装</h4><p>  <a href="https://curl.haxx.se/dlwiz/?type=bin&amp;os=Win64&amp;flav=-&amp;ver=*&amp;cpu=x86_64" target="_blank" rel="noopener">进入官网</a><br>  <a href="https://stackoverflow.com/questions/9507353/how-do-i-install-set-up-and-use-curl-on-windows" target="_blank" rel="noopener">具体请看</a></p><h4 id="6-the-type-is-not-accessible"><a href="#6-the-type-is-not-accessible" class="headerlink" title="(6) the type** is not accessible"></a>(6) the type** is not accessible</h4><p>​    用<code>eclipse build path</code>导入<code>classpath or module path</code>存在，但通过以<code>Maven</code>形式导入，不存在这种问题<br>    深层封装问题，未解决。</p><h4 id="7-实参和形参的区别"><a href="#7-实参和形参的区别" class="headerlink" title="(7) 实参和形参的区别"></a>(7) 实参和形参的区别</h4><p>请看<code>DeleteLinkedNodeFromTO（packet Algorithm）</code><br> <a href="https://blog.csdn.net/johnson_moon/article/details/54094655" target="_blank" rel="noopener">参考</a></p><h4 id="8-Could-not-instantiate-TestExecutionListener"><a href="#8-Could-not-instantiate-TestExecutionListener" class="headerlink" title="(8) Could not instantiate TestExecutionListener"></a>(8) Could not instantiate TestExecutionListener</h4><p>Specify custom listener classes or make the default listener classes (and their required dependencies) available. Offending class: [javax/servlet/ServletContext]<br><code>原因</code><br><code>没有提供存在该包lib，如果没有使用web一些包，可以不需要管这个问题，这是默认的springTest实例的一些类</code><br><a href="https://stackoverflow.com/questions/26125024/could-not-instantiate-testexecutionlistener" target="_blank" rel="noopener">具体解决方案请看</a></p><h4 id="9-java-lang-ClassNotFoundException-javax-xml-bind-JAXBException"><a href="#9-java-lang-ClassNotFoundException-javax-xml-bind-JAXBException" class="headerlink" title="(9) java.lang.ClassNotFoundException: javax.xml.bind.JAXBException"></a>(9) java.lang.ClassNotFoundException: javax.xml.bind.JAXBException</h4><p><code>原因</code><br><code>未发现这个javax.xml.bind/..包在发布web应用里面由于java9module配置移除了java ee包含的java/xml/bind/</code><br><code>解决方案</code><br><code>发布的web应用下面lib库中添加有关联的包</code><br><a href="https://blog.csdn.net/hadues/article/details/79188793" target="_blank" rel="noopener">具体解决方案</a></p><h4 id="10-严重-Invalid-message-recieved-with-signature-18245"><a href="#10-严重-Invalid-message-recieved-with-signature-18245" class="headerlink" title="(10) 严重: Invalid message recieved with signature 18245"></a>(10) 严重: Invalid message recieved with signature 18245</h4><p> <code>原因</code></p><p><code>这个提示是由于我用HTTP方式访问了8009端口，而8009端口是通过AJP访问的</code></p><h4 id="11-关于mysql-Access-denied-for-user-root-localhos问题解答"><a href="#11-关于mysql-Access-denied-for-user-root-localhos问题解答" class="headerlink" title="(11) 关于mysql Access denied for user root@localhos问题解答"></a>(11) 关于mysql Access denied for user root@localhos问题解答</h4><p>  <code>原因</code><br>  <code>首次登录mysql密码未设置是遇到拒绝访问，权限检查不予许</code><br>  <code>解决方案</code></p><ul><li>如果未关闭MYSQL服务，关闭MYSQL服务 例：command line:net stop mysql;</li><li>进入安装目录 $/my.ini配置文件，在[mysqld]条目下添加–skip-grant-tables，过着cmd命令 $mysqld-nt –skip-grant-tables，启动mysql，忽略权限检查</li><li>在mysql命令行中，mysqladmin -u root flush-privileges password “newpassword” 重设root密码</li><li>net start mysql 重新登录</li></ul><h4 id="12-关于phpmydmin管理界面不存在添加用户权限的原因解答"><a href="#12-关于phpmydmin管理界面不存在添加用户权限的原因解答" class="headerlink" title="(12) 关于phpmydmin管理界面不存在添加用户权限的原因解答"></a>(12) 关于phpmydmin管理界面不存在添加用户权限的原因解答</h4><p><code>原因</code><br><code>首次登录未设置密码权限不够导致.通过上面的解决方案，可以解决这个问题</code></p><h4 id="13-C语言中标准输入的结束符-windows-CTRL-z，linux是Ctrl-d"><a href="#13-C语言中标准输入的结束符-windows-CTRL-z，linux是Ctrl-d" class="headerlink" title="(13) C语言中标准输入的结束符 windows CTRL+z，linux是Ctrl+d"></a>(13) C语言中标准输入的结束符 windows CTRL+z，linux是Ctrl+d</h4><h4 id="14-An-invalid-character-32-was-present-in-the-Cookie-value"><a href="#14-An-invalid-character-32-was-present-in-the-Cookie-value" class="headerlink" title="(14) An invalid character [32] was present in the Cookie value"></a>(14) An invalid character [32] was present in the Cookie value</h4><p>WEB16 lastAccessTimeServlet SimpleDateFormat format = new SimpleDateFormat(“yyyy-MM-dd hh:mm:ss”);<br><code>原因</code><br><code>an invalid character [32] was present in the Cookie value  中32对应的编码是空格</code><br><code>Stack Overflow上的回答：This is due to Tomcat&#39;s cookie processing being changed to a RFC 6265 compliant implementation by default in 8.5, which does not allow space (character 32), among others. 我的tomcat版本是9.0，发现WEB16 lastAccessTimeServlet SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;)这行代码yyyy-MM-dd hh:mm:ss存在空格。</code></p><p><code>解决方案</code><br><code>去除空格，问题解决</code><br><a href="https://blog.csdn.net/allan_liu_/article/details/74990162" target="_blank" rel="noopener">具体解决思路</a></p><h4 id="15-android-can’t-resolve-R"><a href="#15-android-can’t-resolve-R" class="headerlink" title="(15) android:can’t resolve R"></a>(15) android:can’t resolve R</h4><p><code>原因</code><br><code>可能R文件无意删除或者其他因素</code><br><code>解决方法</code><br><code>build-&gt;rebuild(重新生成R文件)</code></p><h4 id="16-github-There-isn’t-a-GitHub-Pages-site-here"><a href="#16-github-There-isn’t-a-GitHub-Pages-site-here" class="headerlink" title="(16) github There isn’t a GitHub Pages site here."></a>(16) github There isn’t a GitHub Pages site here.</h4><p>github page 绑定域名以后，在浏览器输入域名但是出现上面错误。<br><code>原因</code><br><code>域名已经成功解析到远程主机（github page），但是因为github page绑定域名需要一个特定文件CNAME（包含域名）才能定向到github，因为我并没有创建。</code>解决方法<code></code>创建一个特定的CNAME文件，在里面加入自己的域名`</p><h4 id="17-java-net-UnknownHostException-Unable-to-resolve-host-“guolin-tech”-No-address-associated-with-hostname"><a href="#17-java-net-UnknownHostException-Unable-to-resolve-host-“guolin-tech”-No-address-associated-with-hostname" class="headerlink" title="(17) java.net.UnknownHostException: Unable to resolve host “guolin.tech”: No address associated with hostname"></a>(17) java.net.UnknownHostException: Unable to resolve host “guolin.tech”: No address associated with hostname</h4><p>在做第一行代码天气项目遇到问题<br><code>原因</code><br><code>安卓浏览器hostname不能够resolved，如果domain name没有附上的</code></p><p><a href="https://stackoverflow.com/questions/8651043/android-browser-hostnames-does-not-get-resolved-if-domain-name-is-not-appended" target="_blank" rel="noopener">具体原因</a><br><code>解决方法</code><br><code>$ ping guolin.tech,替换host域名为ip地址，例子ip为：47.90.126.26</code></p><h4 id="18-未能解决plugin-with-id-‘com-android-application’-not-found-待解决"><a href="#18-未能解决plugin-with-id-‘com-android-application’-not-found-待解决" class="headerlink" title="(18) 未能解决plugin with id ‘com.android.application’ not found$待解决"></a>(18) 未能解决plugin with id ‘com.android.application’ not found$待解决</h4><p><code>不是步骤 new--&gt;import project</code><br><code>而是步骤 new--&gt;import module</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题解决&quot;&gt;&lt;a href=&quot;#问题解决&quot; class=&quot;headerlink&quot; title=&quot;问题解决&quot;&gt;&lt;/a&gt;问题解决&lt;/h3&gt;&lt;h4 id=&quot;1-导入-jar文件可执行文件与eclipse需要重写遇到did-not-contain-the-main-typ
      
    
    </summary>
    
      <category term="extension" scheme="http://log.xiaohaoming.com/categories/extension/"/>
    
    
      <category term="problem" scheme="http://log.xiaohaoming.com/tags/problem/"/>
    
      <category term="solve" scheme="http://log.xiaohaoming.com/tags/solve/"/>
    
  </entry>
  
  <entry>
    <title>MySQL常用命令</title>
    <link href="http://log.xiaohaoming.com//2018/07/extension-MySQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>http://log.xiaohaoming.com//2018/07/extension-MySQL常用命令.html</id>
    <published>2018-07-09T16:49:37.414Z</published>
    <updated>2018-07-09T16:49:37.414Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MySQL常用命令"><a href="#MySQL常用命令" class="headerlink" title="MySQL常用命令"></a>MySQL常用命令</h3><h4 id="查询表user所有字段信息"><a href="#查询表user所有字段信息" class="headerlink" title="查询表user所有字段信息"></a>查询表user所有字段信息</h4><pre><code>SELECT 字段 FROM 表；</code></pre><p><code>eg :SELECT * FROM user;</code></p><h4 id="选择db-test数据库"><a href="#选择db-test数据库" class="headerlink" title="选择db_test数据库"></a>选择db_test数据库</h4><pre><code>USE 数据库;</code></pre><p><code>eg :USE db_test;</code></p><h4 id="在表user插入一列名为name，类型为varchar，且不为NULL字段"><a href="#在表user插入一列名为name，类型为varchar，且不为NULL字段" class="headerlink" title="在表user插入一列名为name，类型为varchar，且不为NULL字段"></a>在表user插入一列名为name，类型为varchar，且不为NULL字段</h4><pre><code>ALTER TABLE 表 ADD 字段名 类型 xx;</code></pre><p><code>eg :ALTER TABLE user ADD name varchar(40) NOT NULL;</code></p><h4 id="删除表user中字段为id的一列"><a href="#删除表user中字段为id的一列" class="headerlink" title="删除表user中字段为id的一列"></a>删除表user中字段为id的一列</h4><pre><code>ALTER TABLE 表 DROP 字段名;</code></pre><p><code>eg :ALTER TABLE user DROP id;</code></p><h4 id="在表user中七个字段（Filed）插入一行数据"><a href="#在表user中七个字段（Filed）插入一行数据" class="headerlink" title="在表user中七个字段（Filed）插入一行数据"></a>在表user中七个字段（Filed）插入一行数据</h4><pre><code>INSERT INTO 表 VALUES(Field,Field,Field,Field);</code></pre><p><code>eg :INSERT INTO user(username,password,uid,name,email,sex,birthday) VALUES(&quot;ghu2&quot;,&quot;12312&quot;,&quot;1e0d8987-7c8d-4f9b-8cd4-2adba575b464&quot;,&quot;gy&quot;,&quot;twg&quot;,&quot;tfy&quot;,&quot;wf&quot;);</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;MySQL常用命令&quot;&gt;&lt;a href=&quot;#MySQL常用命令&quot; class=&quot;headerlink&quot; title=&quot;MySQL常用命令&quot;&gt;&lt;/a&gt;MySQL常用命令&lt;/h3&gt;&lt;h4 id=&quot;查询表user所有字段信息&quot;&gt;&lt;a href=&quot;#查询表user所有字段信
      
    
    </summary>
    
      <category term="extension" scheme="http://log.xiaohaoming.com/categories/extension/"/>
    
    
      <category term="mysql" scheme="http://log.xiaohaoming.com/tags/mysql/"/>
    
      <category term="command" scheme="http://log.xiaohaoming.com/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="http://log.xiaohaoming.com//2018/07/algorithm-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.html"/>
    <id>http://log.xiaohaoming.com//2018/07/algorithm-快速排序.html</id>
    <published>2018-07-09T16:48:04.315Z</published>
    <updated>2018-07-09T16:48:04.315Z</updated>
    
    <content type="html"><![CDATA[<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h4 id="什么是快速排序？"><a href="#什么是快速排序？" class="headerlink" title="什么是快速排序？"></a>什么是快速排序？</h4><p>快速排序<code>Quicksort</code>又称划分交换排序<code>partition-exchange sort.</code>。是对冒泡排序的一种改进；是一种不稳定排序<a href="在待排序的记录系列中，存在多个具有相同的关键字的记录，若经过排序记录相对次序保持不变，则称这种排序算法时稳定的，否则称为不稳定的">^1</a>。</p><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h4><p>通过一趟快速排序。排序的数据分割成独立的两部分，选定一个基准<code>provit</code>，一般选择数组首元素。通过排序，基准值被交换到这样一个数组位置。其中一部分的所有数据都比基准小，另外一部分的所有数据都比基准大。这样就可以看作已经排序好基准<a href="排序好数组元素的一个值">^3</a>。然后再按此方法对两部分在进行快速排序，整个过程可以递归进行，以此达到整个数据成为有序序列</p><ul><li><p>阈值问题<a href="阈的意思是界限，故阈值又叫临界值，是指一个效应能够产生的最低值或最高值">^2</a>：递归基 <code>left&gt;=right</code> 一趟快速排序分割数据长度<em>相对于数组</em><u>至少两个元素</u>。</p><p><a href="https://zh.wikipedia.org/wiki/快速排序" target="_blank" rel="noopener">详情</a></p></li></ul><h4 id="C版本"><a href="#C版本" class="headerlink" title="C版本"></a>C版本</h4><p><code>原地排序</code></p><p><a href="https://zh.wikipedia.org/wiki/快速排序" target="_blank" rel="noopener">非原地排序详情</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> sour[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x,<span class="keyword">int</span> *y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">quickSort(a,<span class="number">0</span>,<span class="number">7</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> sour[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=left;</span><br><span class="line"><span class="keyword">int</span> j=right<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> provit=sour[right];</span><br><span class="line"><span class="keyword">if</span>(left&gt;=right)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;j)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(sour[i]&lt;provit&amp;&amp;i&lt;j)</span><br><span class="line">&#123;</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(sour[j]&gt;=provit&amp;&amp;i&lt;j)</span><br><span class="line">&#123;</span><br><span class="line">--j;</span><br><span class="line">&#125;</span><br><span class="line">swap(&amp;sour[i],&amp;sour[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sour[i]&gt;=provit)</span><br><span class="line"><span class="comment">//为什么写&amp;provit不行？写&amp;sour[right]可以</span></span><br><span class="line"><span class="comment">//忘了&amp;provit不再数组之中，交换没用</span></span><br><span class="line">&#123;</span><br><span class="line">swap(&amp;sour[i],&amp;sour[right]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">i++; <span class="comment">//当需排序的数组已经是有序的时候，会出现i==right-1，且sour[i]&lt;provit,此时provit为中间值</span></span><br><span class="line"><span class="keyword">if</span>(i)  <span class="comment">//i==左边界（第一躺排序为i==0）时可以不再需要递归排序左边</span></span><br><span class="line">&#123;</span><br><span class="line">quickSort(sour,left,i<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">quickSort(sour,i+<span class="number">1</span>,right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x,<span class="keyword">int</span> *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tem=*x;</span><br><span class="line">*x=*y;</span><br><span class="line">*y=tem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="java版本"><a href="#java版本" class="headerlink" title="java版本"></a>java版本</h4><p><code>原地排序</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> other.extention.algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> algorithm.extention.util.SortUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 13612</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2018年7月4日</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * （1）未设置递归基，导致递归无限循环</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * （2）未真正在一趟把排序的数据分割成独立的两部分，即为达到i&lt;j</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QuickSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source 需要排序的int类型数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left 数组左边界</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 数组右边界</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] source, <span class="keyword">int</span> left,<span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left&gt;=right) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i=left;</span><br><span class="line">        <span class="keyword">int</span> j=right;</span><br><span class="line">        <span class="keyword">int</span> key=source[left];</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j) &#123;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j&amp;&amp;key&lt;=source[j]) &#123;</span><br><span class="line">            --j;</span><br><span class="line">            &#125;</span><br><span class="line">            source[i]=source[j];</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j&amp;&amp;key&gt;=source[i]) &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            &#125;</span><br><span class="line">            source[j]=source[i];</span><br><span class="line">        &#125;</span><br><span class="line">        source[i]=key;</span><br><span class="line">        sort(source,left,i-<span class="number">1</span>);</span><br><span class="line">        sort(source,i+<span class="number">1</span>,right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetArr 实现Comparable接口的泛型数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 泛型数组左边界</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end  泛型数组右边界</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; T[] quickSort(T[] targetArr, <span class="keyword">int</span> start, <span class="keyword">int</span> end) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = start + <span class="number">1</span>, j = end;</span><br><span class="line">        T key = targetArr[start];</span><br><span class="line">        SortUtil&lt;T&gt; sUtil = <span class="keyword">new</span> SortUtil&lt;T&gt;();</span><br><span class="line">        <span class="keyword">if</span> (start &gt;= end)</span><br><span class="line">        <span class="keyword">return</span> (targetArr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 从i++和j--两个方向搜索不满足条件的值并交换</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">         * 条件为：i++方向小于key，j--方向大于key</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (targetArr[j].compareTo(key) &gt; <span class="number">0</span>)</span><br><span class="line">            j--;</span><br><span class="line">            <span class="keyword">while</span> (targetArr[i].compareTo(key) &lt; <span class="number">0</span> &amp;&amp; i &lt; j)</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= j)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            sUtil.swap(targetArr, i, j);</span><br><span class="line">            <span class="comment">// 维持在两边正好等于key时能够进行下一次增长比较</span></span><br><span class="line">            <span class="keyword">if</span> (targetArr[i] == key) &#123;</span><br><span class="line">            j--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 关键数据放到‘中间’ */</span></span><br><span class="line">        sUtil.swap(targetArr, start, j);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (start &lt; i - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.quickSort(targetArr, start, i - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j + <span class="number">1</span> &lt; end) &#123;</span><br><span class="line">        <span class="keyword">this</span>.quickSort(targetArr, j + <span class="number">1</span>, end);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> targetArr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Integer[] sour= &#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">4</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    QuickSort qs=<span class="keyword">new</span> QuickSort();</span><br><span class="line">    qs.quickSort(sour, <span class="number">0</span>, sour.length-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sour.length;i++) &#123;</span><br><span class="line">    System.out.println(sour[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><h5 id="常规计算"><a href="#常规计算" class="headerlink" title="常规计算"></a>常规计算</h5><p>我们不难观察到分区运算，数组的元素都会在每次循环中走访一次，使用<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/34109fe397fdcff370079185bfdb65826cb5565a" alt="{\displaystyle O(n)}">的时间。</p><p>在最好的情况下，每次我们运行一次分区，我们会把一个数列分为两个几近相等的分段。这个意思就是每次递归处理一般大小的数列。因此，在到达大小为一的数列前，我们只要做<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/317ab5292da7c7935aec01a570461fe0613b21d5" alt="\log n"> 次嵌套的调用。但是在同一层次结构的两个程序调用中，不会处理原来数列的相同部分。因此，调用每一层结构总共需要<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/34109fe397fdcff370079185bfdb65826cb5565a" alt="{\displaystyle O(n)}"> 的时间。结果是这个算法仅需要<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/9d2320768fb54880ca4356e61f60eb02a3f9d9f1" alt="{\displaystyle O(n\log n)}"> 的时间。</p><h5 id="递归计算"><a href="#递归计算" class="headerlink" title="递归计算"></a>递归计算</h5><p>设立<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/0be5a46684e1279c27414b285fa995f30407d002" alt="{\displaystyle T(n)}"> 递归关系式<a href="排序大小为*n*的数组所需要的时间">^4</a></p><ul><li>在最好的情况下，因为一个单独的快速排序调用牵涉<em>O(n)</em>的工作，加上对<em>n/2</em>大小数列的两个数列的递归调用，这个关系是：</li></ul><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/1998b8b2f798bc4a5115ae51a3db2e38cae82416" alt="{\displaystyle T(n)=O(n)+2T(n/2)}">  </p><p>解决这种关系式类型的标准<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95" target="_blank" rel="noopener">数学归纳法</a>技巧告诉我们</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/f9c138b54d2af63770ea4347bf2a9aa62f469db5" alt="{\displaystyle T(n)=O(n\log n)}">。 </p><ul><li>在最坏的情况是，两子数列拥有大各为O<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/92d98b82a3778f043108d4e20960a9193df57cbf" alt="1"> 和O<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/fbd0b0f32b28f51962943ee9ede4fb34198a2521" alt="{\displaystyle n-1}">，且调用树（call tree）变成为一个<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/a601995d55609f2d9f5e233e36fbe9ea26011b3b" alt="n">个嵌套（nested）调用的线性连串（chain）。第<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/add78d8608ad86e54951b8c8bd6c8d8416533d20" alt="i"> 次调用作了 <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/0f7d6b1a0d3b42c5152740ac77e65a319f289c22" alt="{\displaystyle O(n-i)}">的工作量，且<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/7fc41592878f1bc3566b9a749ffbf5743b0ab126" alt="\sum _{i=0}^{n}(n-i)=O(n^{2})">递归关系式为：</li></ul><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/11b7fe1a2ecfdad192e9d9625f41072571af645c" alt="{\displaystyle T(n)=O(n)+T(1)+T(n-1)=O(n)+T(n-1)}"></p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/8526253f8646d3899c4b3f99b6b1c1d3d911a33c" alt="{\displaystyle T(n)=O(n^{2})}"> </p><h5 id="平均复杂度"><a href="#平均复杂度" class="headerlink" title="平均复杂度"></a>平均复杂度</h5><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/080cf0926b920274d591f53311ea7f0278daf5b4" alt="C(n)=n-1+{\frac {1}{n}}\sum _{i=0}^{n-1}(C(i)+C(n-i-1))=2n\ln n=1.39n\log _{2}n"></h4><p> <img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/fbd0b0f32b28f51962943ee9ede4fb34198a2521" alt="{\displaystyle n-1}">是分区所使用的比较次数。因为基准值是相当均匀地落在排列好的数列次序之任何地方<code>概率相同</code>，总和就是所有可能分区的平均。 </p><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p><a href="https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F#%E7%A9%BA%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6" target="_blank" rel="noopener">详情</a></p><p>参考引用：</p><ul><li><a href="https://baike.baidu.com/item/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/369842" target="_blank" rel="noopener">https://baike.baidu.com/item/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/369842</a>?</li><li><a href="https://zh.wikipedia.org/wiki/快速排序" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/快速排序</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h3&gt;&lt;h4 id=&quot;什么是快速排序？&quot;&gt;&lt;a href=&quot;#什么是快速排序？&quot; class=&quot;headerlink&quot; title=&quot;什
      
    
    </summary>
    
      <category term="algorithm" scheme="http://log.xiaohaoming.com/categories/algorithm/"/>
    
    
      <category term="quickSort" scheme="http://log.xiaohaoming.com/tags/quickSort/"/>
    
      <category term="algorithm" scheme="http://log.xiaohaoming.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>SSLCertificateVerification）</title>
    <link href="http://log.xiaohaoming.com//2018/07/extension-SSLCertificateVerification-%E8%AF%81%E4%B9%A6.html"/>
    <id>http://log.xiaohaoming.com//2018/07/extension-SSLCertificateVerification-证书.html</id>
    <published>2018-07-05T08:15:57.116Z</published>
    <updated>2018-07-05T08:15:57.116Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SSL-Certificate-Verification-证书"><a href="#SSL-Certificate-Verification-证书" class="headerlink" title="SSL Certificate Verification_证书"></a>SSL Certificate Verification_证书</h3><p><a href="https://curl.haxx.se/docs/sslcerts.html" target="_blank" rel="noopener">SSL</a><br>SSL是的旧的名字，现在他被叫做TLS</p><h4 id="原生SSL"><a href="#原生SSL" class="headerlink" title="原生SSL"></a>原生SSL</h4><p>如果<code>libcurl</code>是用<code>Schannel</code>或者<code>Secure Transport</code>构造的（原生<code>SSL</code>库包含在<code>Windows</code>和<code>Mac OS x</code>)，那么这个不能适用你。向下滑获得<code>OS-native-engines</code>如何处理<code>SSL</code>证书。如果你是不确定，那么run“curl -V”和阅读结果 。如果版本字符串包含”<code>WinSSL</code>“，那么这个是使用<code>hannel support</code></p><h4 id="是关于可信"><a href="#是关于可信" class="headerlink" title="是关于可信"></a>是关于可信</h4><p>这个系统是关于可信的。在你的当地<code>CA</code>证书存储区，你有来自可信赖<code>CA</code>证书机构证书这个你能够使用来验证这个你看起来是有效的证书。他们是被签署通过你信赖的某一个<code>CAs</code>证书机构。<br>    你信赖这个CAs？你能够决定信赖一个相同的公司组这个你操作系统信赖的，或者一个组某一个知名浏览器信赖的。这些都基于你的信任。你应该意识到这个现代操作系统和浏览器是被启动信任上百个公司和最近几年<code>several such CAS</code>已经被发现时不可信的。</p><h4 id="证书验证"><a href="#证书验证" class="headerlink" title="证书验证"></a>证书验证</h4><p><code>libcurl</code>默认执行<code>peer</code>对等<code>SSL</code>证书验证。这个是被做通过使用能够被<code>SSL</code>库使用来确认对等服务器证书时有效的<code>CA</code>证书存储区。</p><pre><code>Note:If you communicate with HTTPS, FTPS or other TLS-using servers using  certificates that are signed by CAs present in the store, you can be sure that the remote server really is the one it claims to be.</code></pre><h4 id="忽略证书验证"><a href="#忽略证书验证" class="headerlink" title="忽略证书验证"></a>忽略证书验证</h4><p>如果远程服务器使用一个自签名证书，如果你没有安装CA证书存储区，如果服务器使用一个被并没有包含在你使用存储区CA证书签署，或者这个远程主机是一个<code>imposer</code>冒名顶替者<code>impersonting</code>扮演你喜爱的站点，但是你想从这个服务器传输文件，做下面的一种：</p><p>1: 告诉libcurl不要验证对等。使用libcurl禁用<code>curl_easy_setopt(curl,CURLOPT_SSL_VERIFYPEER,FALSE)</code><br>2: 使用<code>curl command line tool</code>禁用这个使用<code>-k/--insecure</code><br>3:  得到一个能够验证远程服务器CA 证书和当连接的时候使用恰当的选择来指定这个CA证书来证。<br>     <1>   对于<code>libcurl hacker</code>  <code>curl_easy_setopt(curl,CURLOPT_CAPATH,capath)</code><br>     <2>  <code>curl command line tool</code> <code>--cacert [file]</code><br>4: 为你服务器添加<code>CA</code>证书到已经存在默认的<code>CA</code> 证书存储区。默认的CA证书存储区能够在<code>compile</code>时间改变,即通过下面的配置选择：</2></1></p><ul><li><code>--with-ca-bundle=FILE</code><br>  Note:use the specified file as CA certificate store. CA certificates need to be concatenated in PEM format into this file</li><li><p><code>--with-ca-path=PATH</code><br>  Note:use the specified path as CA certificate store. CA certificates need to be stored as individual PEM files in this directory. You may need to run c_rehash after adding files there.</p></li><li><p>If neither of the two options is specified, configure will try to auto-detect a setting. It’s also<br>possible to explicitly not hardcode any default store but rely on the built in default the crypto library may provide instead. You can achieve that by passing both –without-ca-bundle and –without-ca-pathto the configure script.</p></li><li><p>If you use Internet Explorer, this is one way to get extract the CA cert for a particular server:</p><pre><code>&lt;1&gt;  View the certificate by double-clicking the padlock(挂锁)&lt;2&gt;  Find out where the CA certificate is kept (Certificate&gt; Authority Information Access&gt;URL)&lt;3&gt;  Get a copy of the crt file using curl&lt;4&gt;  Convert it from crt to PEM using the openssl tool: openssl x509 -inform DES -in     yourdownloaded.crt -out outcert.pem -text&lt;5&gt;  Add the &apos;outcert.pem&apos; to the CA certificate store or use it stand-alone as described below.If you use the &apos;openssl&apos; tool, this is one way to get extract the CA cert for a particular server: 1:openssl s_client -connect xxxxx.com:443 |tee logfile 2:type &quot;QUIT&quot;, followed by the &quot;ENTER&quot; key  3:The certificate will have &quot;BEGIN CERTIFICATE&quot; and &quot;END CERTIFICATE&quot; markers.If you want to see the data in the certificate, you can do: &quot;openssl x509 -inform PEM -in certfile -text -out certdata&quot; where certfile is the cert you extracted from logfile. Look in certdata.If you want to trust the certificate, you can add it to your CA certificate store or use it stand-alone as described. Just remember that the security is no better than the way you obtained the certificate.If you&apos;re using the curl command line tool, you can specify your own CA cert path by setting the environment variable CURL_CA_BUNDLE to the path of your choice.</code></pre></li><li><p>If you’re using the curl command line tool on Windows, curl will search for a CA cert file named “curl-ca-bundle.crt” in these directories and in this order:<br><1> application’s directory<br><2> current working directory<br><3> Windows System directory (e.g. C:\windows\system32)<br><4> Windows Directory (e.g. C:\windows)<br><5> all directories along %PATH%</5></4></3></2></1></p></li><li>Get a better/different/newer CA cert bundle! One option is to extract the one a recent Firefox browser uses by running ‘make ca-bundle’ in the curl build tree root, </li><li><p>or possibly download a version that was generated this way for you: CA Extract<br><1>Certificate Verification with NSS<br><2>Certificate Verification with Schannel and Secure Transport</2></1></p></li><li><p>如果libcurl是使用Schannel(Microsoft native TLS engine:验证得出本机目前使用这个built的)built或者苹果（省略）支持，那么libcurl将会任然执行对等验证，但是如果代替使用CAcertificate bundle，它将会使用这个built在OS里证书.这些相同证书出现在internet Options controls panel(under windows),任何用于证书的自定义安全规则都将得到遵守<br>  除非对等验证被禁用，否则Schannel将对证书运行CRL检查<br>  HTTPS proxy   </p><h3 id="SSL-certificate-problem-unable-to-get-local-issuer-certificate"><a href="#SSL-certificate-problem-unable-to-get-local-issuer-certificate" class="headerlink" title="SSL certificate problem: unable to get local issuer certificate"></a>SSL certificate problem: unable to get local issuer certificate</h3><p>意味着cUrl不信任 Verisign证书机构<br>  Note:VeriSign  的数字信任服务通过VeriSign的域名登记、数字认证和网上支付三大核心业务，在全球范围内建立起了一个可信的虚拟环境，使任何人在任何地点都能放心地进行数字交易和沟通。而数字证书业务是其起家的核心业务.VeriSign数字证书产品是目前市场上最完整的支持最多应用和最多设备的数字证书产品，主要包括： SSL 证书和代码签名证书。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SSL-Certificate-Verification-证书&quot;&gt;&lt;a href=&quot;#SSL-Certificate-Verification-证书&quot; class=&quot;headerlink&quot; title=&quot;SSL Certificate Verification_证
      
    
    </summary>
    
      <category term="extension" scheme="http://log.xiaohaoming.com/categories/extension/"/>
    
    
      <category term="SSL" scheme="http://log.xiaohaoming.com/tags/SSL/"/>
    
      <category term="extenstion" scheme="http://log.xiaohaoming.com/tags/extenstion/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令（更新）</title>
    <link href="http://log.xiaohaoming.com//2018/07/deploy-Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88%E6%9B%B4%E6%96%B0%EF%BC%89.html"/>
    <id>http://log.xiaohaoming.com//2018/07/deploy-Git常用命令（更新）.html</id>
    <published>2018-07-05T03:33:24.221Z</published>
    <updated>2018-07-05T03:33:24.221Z</updated>
    
    <content type="html"><![CDATA[<h3 id="提交代码时候，来确认谁提交的代码"><a href="#提交代码时候，来确认谁提交的代码" class="headerlink" title="提交代码时候，来确认谁提交的代码"></a>提交代码时候，来确认谁提交的代码</h3><pre><code>Note:所有命令在git bash命令行输入</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">$ git config --global user.name <span class="string">"Nautilus-Nemo"</span></span><br><span class="line">$ git config --global user.name <span class="string">"13612262974@163.com"</span></span><br></pre></td></tr></table></figure><p>确认上面的配置是否成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">$ git config --global user.name</span><br><span class="line">$ git config --global user.name</span><br></pre></td></tr></table></figure><h3 id="创建代码仓库"><a href="#创建代码仓库" class="headerlink" title="创建代码仓库"></a>创建代码仓库</h3><p> 仓库<code>repository</code>是用于保存版本管理所需信息的地方，所有本地提交的代码都会保存在代码仓库中，<br> 如果有需要还可以推送到远程仓库中</p><ul><li>进入所需要创建代码仓库的项目的目录 <code>$ cd [your project directory]</code></li><li><code>$ git init</code></li></ul><pre><code>Note:仓库建立以后，项目的根目录会生成一个隐藏的`.git`文件夹,这个文件就是来记录本地  所有的`git`操作。如果要删除本地仓库的话，只需要删除这个文件夹</code></pre><h3 id="查看所有本地的git操作"><a href="#查看所有本地的git操作" class="headerlink" title="查看所有本地的git操作"></a>查看所有本地的git操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls al</span><br></pre></td></tr></table></figure><h3 id="提交本地代码"><a href="#提交本地代码" class="headerlink" title="提交本地代码"></a>提交本地代码</h3><ul><li><p>添加一个文件 $ git add (your file)</p></li><li><p>添加一个目录 $ git add (your directory)</p></li><li><p>添加某项目下的所有文件 $  git add .</p></li><li><p>添加完所需要的文件后，提交 <code>$ git commit -m &quot;First commit.&quot;</code></p><p>  Note:我们一般通过-m参数来加上提交的文件信息</p></li></ul><h3 id="发布至远程仓库"><a href="#发布至远程仓库" class="headerlink" title="发布至远程仓库"></a>发布至远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><p>其中origin部分指定的是远程版本库的Git地址，master部分指定的是同步到哪一个分支上</p><h4 id="远程版本库上的修改同步到本地"><a href="#远程版本库上的修改同步到本地" class="headerlink" title="远程版本库上的修改同步到本地"></a>远程版本库上的修改同步到本地</h4><ol><li><p>Git提供了两种命令来完成此功能，分别是<code>fetch</code>和<code>pull</code>,<code>fetch</code>的语法规则和<code>push</code>差不多</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin master</span><br></pre></td></tr></table></figure></li><li><p>执行了这个命令后，就会将远程版本库上的代码同步到本地，不过同步下来的代码并不会合并到任何分支上，而是会存放到<code>origin/master</code>分支。</p></li><li><p>我们可以通过diff命令来查看远程版本库到底修改了那些东西:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff origin/master</span><br></pre></td></tr></table></figure></li><li><p>调用<code>merge</code>命令将<code>origin/master</code>分支上的修改合并到主分支上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge origin/master</span><br></pre></td></tr></table></figure></li></ol><h4 id="pull命令"><a href="#pull命令" class="headerlink" title="pull命令"></a>pull命令</h4><p>则是将fetch和merge这两个命令放在一起执行。他可以从远程版本库上获取最新的代码并且合并到本地上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></p><h3 id="复制Github中已有的开源库"><a href="#复制Github中已有的开源库" class="headerlink" title="复制Github中已有的开源库"></a>复制Github中已有的开源库</h3><ol><li>复制这个开源库的url：即右上角蓝色<code>clone or download</code>按钮</li><li><p>打开<code>git bash</code>,<code>cd</code>至你要复制的项目目录，使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> (url)</span><br></pre></td></tr></table></figure><p> Note:可能需要把所有clone的文件复制到上一层，因为上一层才是项目的根目录，要注意把隐藏文件.git复制过去</p></li></ol><h3 id="分支的用法"><a href="#分支的用法" class="headerlink" title="分支的用法"></a>分支的用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure><p>查看有那些分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch version1.0</span><br></pre></td></tr></table></figure></p><p>创建了一个名为version1.0的分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>切换到master分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge -D version1.0</span><br></pre></td></tr></table></figure><p>使用merge命令来完成合并操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D version1.0</span><br></pre></td></tr></table></figure><p>删除分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push --repo=https://github.com/Nautilus-Nemo/coolweather</span><br></pre></td></tr></table></figure></p><p>提交到具体的库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure><p>确定提交的库</p><p>[详情]  (file:///C:/software/Git/mingw64/share/doc/git-doc/git-push.html#URLS）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;提交代码时候，来确认谁提交的代码&quot;&gt;&lt;a href=&quot;#提交代码时候，来确认谁提交的代码&quot; class=&quot;headerlink&quot; title=&quot;提交代码时候，来确认谁提交的代码&quot;&gt;&lt;/a&gt;提交代码时候，来确认谁提交的代码&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Note:所
      
    
    </summary>
    
      <category term="deploy" scheme="http://log.xiaohaoming.com/categories/deploy/"/>
    
    
      <category term="Git" scheme="http://log.xiaohaoming.com/tags/Git/"/>
    
      <category term="deploy" scheme="http://log.xiaohaoming.com/tags/deploy/"/>
    
      <category term="tool" scheme="http://log.xiaohaoming.com/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>开始使用GitHub</title>
    <link href="http://log.xiaohaoming.com//2018/06/deploy-%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8GitHub.html"/>
    <id>http://log.xiaohaoming.com//2018/06/deploy-开始使用GitHub.html</id>
    <published>2018-06-29T15:11:03.343Z</published>
    <updated>2018-06-29T15:11:03.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开始使用GitHub"><a href="#开始使用GitHub" class="headerlink" title="开始使用GitHub"></a>开始使用GitHub</h1><h2 id="什么是GitHub？"><a href="#什么是GitHub？" class="headerlink" title="什么是GitHub？"></a>什么是GitHub？</h2><h4 id="GitHub是一个用于版本控制和合并代码托管平台。它让你和你的工作伙伴工作在同一个项目不管你们两者是否相隔天涯海角。"><a href="#GitHub是一个用于版本控制和合并代码托管平台。它让你和你的工作伙伴工作在同一个项目不管你们两者是否相隔天涯海角。" class="headerlink" title="GitHub是一个用于版本控制和合并代码托管平台。它让你和你的工作伙伴工作在同一个项目不管你们两者是否相隔天涯海角。"></a>GitHub是一个用于版本控制和合并代码托管平台。它让你和你的工作伙伴工作在同一个项目不管你们两者是否相隔天涯海角。</h4><h2 id="创造一个Respository"><a href="#创造一个Respository" class="headerlink" title="创造一个Respository"></a>创造一个Respository</h2><h4 id="一个respository是通常用来组织一个项目。Respository能够包含文件夹和文件，图像，视频，电子表格，和数据集等任何东西你的项目需要的。我们建议包括一个README，或者一个文件包含你的项目信息。Github使它容易去增加一个在相同时间你去创造一个新的Respository（GitHub可以在创建新存储库的同时轻松添加一个）。它也提供其他常用的选择。例：license-file"><a href="#一个respository是通常用来组织一个项目。Respository能够包含文件夹和文件，图像，视频，电子表格，和数据集等任何东西你的项目需要的。我们建议包括一个README，或者一个文件包含你的项目信息。Github使它容易去增加一个在相同时间你去创造一个新的Respository（GitHub可以在创建新存储库的同时轻松添加一个）。它也提供其他常用的选择。例：license-file" class="headerlink" title="一个respository是通常用来组织一个项目。Respository能够包含文件夹和文件，图像，视频，电子表格，和数据集等任何东西你的项目需要的。我们建议包括一个README，或者一个文件包含你的项目信息。Github使它容易去增加一个在相同时间你去创造一个新的Respository（GitHub可以在创建新存储库的同时轻松添加一个）。它也提供其他常用的选择。例：license file"></a>一个<code>respository</code>是通常用来组织一个项目。Respository能够包含文件夹和文件，图像，视频，电子表格，和数据集等任何东西你的项目需要的。我们建议包括一个README，或者一个文件包含你的项目信息。Github使它容易去增加一个在相同时间你去创造一个新的<code>Respository</code>（GitHub可以在创建新存储库的同时轻松添加一个）。它也提供其他常用的选择。例：<code>license file</code></h4><ul><li>在右上角，在你的头像（avatar）或身份证（identicon)旁边,点击+和选择NEW repository</li><li>给你的repository取个名字。例：Hello_world</li><li>写一个简短的描述</li><li>选择初始化这个repository with a README.</li></ul><h2 id="创造一个Branch"><a href="#创造一个Branch" class="headerlink" title="创造一个Branch"></a>创造一个Branch</h2><h4 id="Branching-是一种方式工作在同一时间同一个库中不同的版本。默认的你的repository有一个branch被叫做master-我们经常使用branches来在committing他们到master以前实验和编辑。什么时候你创造一个branch从master-branch-你是制造一个copy，或者快照-snapshot-他人在master分支上工作时对分支进行了更改-你能获得这些更新。"><a href="#Branching-是一种方式工作在同一时间同一个库中不同的版本。默认的你的repository有一个branch被叫做master-我们经常使用branches来在committing他们到master以前实验和编辑。什么时候你创造一个branch从master-branch-你是制造一个copy，或者快照-snapshot-他人在master分支上工作时对分支进行了更改-你能获得这些更新。" class="headerlink" title="Branching 是一种方式工作在同一时间同一个库中不同的版本。默认的你的repository有一个branch被叫做master.我们经常使用branches来在committing他们到master以前实验和编辑。什么时候你创造一个branch从master branch,你是制造一个copy，或者快照(snapshot).他人在master分支上工作时对分支进行了更改,你能获得这些更新。"></a>Branching 是一种方式工作在同一时间同一个库中不同的版本。默认的你的repository有一个branch被叫做master.我们经常使用branches来在committing他们到master以前实验和编辑。什么时候你创造一个branch从master branch,你是制造一个copy，或者快照(snapshot).他人在master分支上工作时对分支进行了更改,你能获得这些更新。</h4><pre><code>你曾经存储过不同的文件版本？像这样story.txtstory-joe-edit.txtstory-joe-edit-reviewed.txtBranches在Github repository完成相同的目标</code></pre><ul><li>先去到你新创建的repository</li><li>点击文件清单上面叫Branch:master下拉项。</li><li>在新的分支文本框打上一个分支名字</li><li>选择蓝色Create Branch框或者点击”Enter”在你的键盘。</li></ul><h2 id="对文件做修改和push他们到GitHub-as-commits"><a href="#对文件做修改和push他们到GitHub-as-commits" class="headerlink" title="对文件做修改和push他们到GitHub as commits"></a>对文件做修改和push他们到GitHub as commits</h2><h4 id="在Github-存储改变是被叫做commits-每个commit有一个相关联的来描述解释变化commit信息。Commit信息能够抓住历史中的变化，所以其他的contributor能够理解你做了什么和为什么这样做"><a href="#在Github-存储改变是被叫做commits-每个commit有一个相关联的来描述解释变化commit信息。Commit信息能够抓住历史中的变化，所以其他的contributor能够理解你做了什么和为什么这样做" class="headerlink" title="在Github,存储改变是被叫做commits.每个commit有一个相关联的来描述解释变化commit信息。Commit信息能够抓住历史中的变化，所以其他的contributor能够理解你做了什么和为什么这样做"></a>在Github,存储改变是被叫做commits.每个commit有一个相关联的来描述解释变化commit信息。Commit信息能够抓住历史中的变化，所以其他的contributor能够理解你做了什么和为什么这样做</h4><p><a href="https://guides.github.com/activities/hello-world/" target="_blank" rel="noopener">具体操作步骤</a></p><h2 id="打开和merge一个pull-request"><a href="#打开和merge一个pull-request" class="headerlink" title="打开和merge一个pull request"></a>打开和merge一个pull request</h2><h4 id="Pull-Request-是的在Github合并的核心-什么时候你打开了一个pull-request-你是正在提出你的改变和请求其他人review和pull-in你的contribution（并要求有人审查并提交你的贡献）和融合他们到他们的分支。pull-请求展示两个分支的diffs，或者不同。"><a href="#Pull-Request-是的在Github合并的核心-什么时候你打开了一个pull-request-你是正在提出你的改变和请求其他人review和pull-in你的contribution（并要求有人审查并提交你的贡献）和融合他们到他们的分支。pull-请求展示两个分支的diffs，或者不同。" class="headerlink" title="Pull Request 是的在Github合并的核心.什么时候你打开了一个pull request,你是正在提出你的改变和请求其他人review和pull in你的contribution（并要求有人审查并提交你的贡献）和融合他们到他们的分支。pull 请求展示两个分支的diffs，或者不同。"></a>Pull Request 是的在Github合并的核心.什么时候你打开了一个pull request,你是正在提出你的改变和请求其他人review和pull in你的contribution（并要求有人审查并提交你的贡献）和融合他们到他们的分支。pull 请求展示两个分支的diffs，或者不同。</h4><h4 id="Gihub-mention-system"><a href="#Gihub-mention-system" class="headerlink" title="Gihub@mention system"></a><a href="https://help.github.com/articles/about-writing-and-formatting-on-github/#text-formatting-toolbar" target="_blank" rel="noopener">Gihub@mention system</a></h4><h4 id="你能询问反馈从指定人们或者队伍。"><a href="#你能询问反馈从指定人们或者队伍。" class="headerlink" title="你能询问反馈从指定人们或者队伍。"></a>你能询问反馈从指定人们或者队伍。</h4><p><a href="https://guides.github.com/activities/hello-world/" target="_blank" rel="noopener">具体操作步骤</a></p><h4 id="融合一个分支到主分支"><a href="#融合一个分支到主分支" class="headerlink" title="融合一个分支到主分支"></a>融合一个分支到主分支</h4><p><a href="https://guides.github.com/activities/hello-world/" target="_blank" rel="noopener">具体操作步骤</a></p><pre><code>To learn more about the power of Pull Requests, we recommend reading the GitHub Flow Guide`https://guides.github.com/introduction/flow/`. You might also visit GitHub Explore`https://github.com/explore` and   get involved in an Open Source project </code></pre><h2 id="Connecting-to-GiHub-with-SSH"><a href="#Connecting-to-GiHub-with-SSH" class="headerlink" title="Connecting to GiHub with SSH"></a>Connecting to GiHub with SSH</h2><h4 id="使用SSH协议，你能连接和认证远程服务器和服务。使用SSH-keys-你能连接Github不需要提供你的用户名和密码在每一次登陆网站"><a href="#使用SSH协议，你能连接和认证远程服务器和服务。使用SSH-keys-你能连接Github不需要提供你的用户名和密码在每一次登陆网站" class="headerlink" title="使用SSH协议，你能连接和认证远程服务器和服务。使用SSH keys,你能连接Github不需要提供你的用户名和密码在每一次登陆网站"></a>使用SSH协议，你能连接和认证远程服务器和服务。使用SSH keys,你能连接Github不需要提供你的用户名和密码在每一次登陆网站</h4><pre><code>当您设置SSH时，您将生成一个SSH密钥并将其添加到ssh-agent，然后将密钥添加到您的 GitHub帐户。将SSH密钥添加到ssh-agent.可确保您的SSH密钥通过使用密码短语具有额外 的安全层。有关更多信息，请参阅“ 使用SSH密钥密码”。要将SSH密钥与使用SAML单点登录 的组织拥有的存储库一起使用，您需要先对其进行授权。有关更多信息，请参阅“ 授权SSH密 钥以用于SAML单一登录组织。”我们建议您定期查看您的SSH密钥列表并撤销任何无效或已被入侵的密钥。</code></pre><p><a href="https://help.github.com/articles/connecting-to-github-with-ssh/" target="_blank" rel="noopener">具体生成SSH或者其他步骤</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;开始使用GitHub&quot;&gt;&lt;a href=&quot;#开始使用GitHub&quot; class=&quot;headerlink&quot; title=&quot;开始使用GitHub&quot;&gt;&lt;/a&gt;开始使用GitHub&lt;/h1&gt;&lt;h2 id=&quot;什么是GitHub？&quot;&gt;&lt;a href=&quot;#什么是GitHub？&quot;
      
    
    </summary>
    
      <category term="deploy" scheme="http://log.xiaohaoming.com/categories/deploy/"/>
    
    
      <category term="deploy" scheme="http://log.xiaohaoming.com/tags/deploy/"/>
    
      <category term="tool" scheme="http://log.xiaohaoming.com/tags/tool/"/>
    
      <category term="Github" scheme="http://log.xiaohaoming.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>android天气项目设计文档（第一行代码）</title>
    <link href="http://log.xiaohaoming.com//2018/06/android-Android-%E5%A4%A9%E6%B0%94%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3.html"/>
    <id>http://log.xiaohaoming.com//2018/06/android-Android-天气设计文档.html</id>
    <published>2018-06-25T09:15:27.984Z</published>
    <updated>2018-06-25T09:15:27.984Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-设计目的"><a href="#1-设计目的" class="headerlink" title="1. 设计目的"></a>1. 设计目的</h3><p>为了让广大<code>Android</code>手机用户能够在第一时间获取最新天气预报消息，以便提前预防，方便出行。同时，把气象翟海早餐的瞬时降到最低，也可以提高公共服务质量，更好的发挥气象事业对经济社会发展的现实作用，有很强的实用价值。虽然该技术在Android平台早已比较成熟，但是通过本次软件的设计开发仍然能帮助我更好的认识Android系统的工作原理。</p><h3 id="2-开发环境"><a href="#2-开发环境" class="headerlink" title="2.开发环境"></a>2.开发环境</h3><ul><li><code>android studio</code></li><li><code>jdk</code></li><li><code>sdk</code></li></ul><h3 id="3-需求分析"><a href="#3-需求分析" class="headerlink" title="3.需求分析"></a>3.需求分析</h3><ol><li>提供用户查看特定地区天气信息和生活建议</li><li>采用灵活方式实现用户获取到的数据是实时的</li><li>设计良好用户界面，提高用户体验</li></ol><h3 id="4-设计"><a href="#4-设计" class="headerlink" title="4.设计"></a>4.设计</h3><h4 id="（1）数据库设计"><a href="#（1）数据库设计" class="headerlink" title="（1）数据库设计"></a>（1）数据库设计</h4><p>  采用开源Android数据库框架LitePal,它采用对象关系映射(ORM)的模式，并将我们平时最常用到的一些数据库功能进行了封装。使得不用编写SQL语句就可以完成各种建表和增删改查的操作。</p><pre><code>Province数据表</code></pre><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">数据类型</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>id</code></td><td style="text-align:center"><code>integer</code></td><td style="text-align:center">自增主键</td></tr><tr><td style="text-align:center"><code>provinceName</code></td><td style="text-align:center"><code>text</code></td><td style="text-align:center">省份名称</td></tr><tr><td style="text-align:center"><code>provinceCode</code></td><td style="text-align:center"><code>integer</code></td><td style="text-align:center">省份代号</td></tr></tbody></table><pre><code>City数据表</code></pre><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">数据类型</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>id</code></td><td style="text-align:center"><code>integer</code></td><td style="text-align:center">自增主键</td></tr><tr><td style="text-align:center"><code>cityName</code></td><td style="text-align:center"><code>text</code></td><td style="text-align:center">城市名称</td></tr><tr><td style="text-align:center"><code>cityCode</code></td><td style="text-align:center"><code>integer</code></td><td style="text-align:center">城市代号</td></tr><tr><td style="text-align:center"><code>provinceId</code></td><td style="text-align:center"><code>integer</code></td><td style="text-align:center">当前市属省的id值</td></tr></tbody></table><pre><code>County数据表</code></pre><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">数据类型</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>id</code></td><td style="text-align:center"><code>integer</code></td><td style="text-align:center">自增主键</td></tr><tr><td style="text-align:center"><code>countyName</code></td><td style="text-align:center"><code>text</code></td><td style="text-align:center">县名称</td></tr><tr><td style="text-align:center"><code>countyCode</code></td><td style="text-align:center"><code>integer</code></td><td style="text-align:center">县代号</td></tr><tr><td style="text-align:center"><code>cityId</code></td><td style="text-align:center"><code>integer</code></td><td style="text-align:center">当前县属市的id值</td></tr></tbody></table><h4 id="（2）功能模块"><a href="#（2）功能模块" class="headerlink" title="（2）功能模块"></a>（2）功能模块</h4><p>从功能需求分析可以看出，整个应用程序应该分为4个模块。分别是<strong>用户界面</strong>，<strong>数据获取模块</strong>和<strong>数据库适配器</strong>和<strong>网络请求模块</strong>。各模块之间的关系如图：</p><p><img src="/images/design.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">B --&gt;|startService 启动服务| I(后台服务)</span><br><span class="line">I --&gt;|八小时更新|H</span><br><span class="line">B[用户界面]--&gt;|设置相关信息| G(&lt;/Br&gt;数据获取模块)</span><br><span class="line">G--&gt;|天气信息| B</span><br><span class="line">G--&gt;D[数据库获取模块]</span><br><span class="line">D--&gt;G</span><br><span class="line">D--&gt;E[Litepal数据库框架]</span><br><span class="line">E--&gt;D</span><br><span class="line">H[okhttp3封装Http请求]--&gt;|解析返回天气数据信息|G</span><br><span class="line">H--&gt;E</span><br><span class="line">F[和风天气预报服务]--&gt;H</span><br></pre></td></tr></table></figure><hr><p>从模块结构图中不难看出，数据获取模块是整个应用程序的核心。主要是由<code>sharePreferencr</code>构成。获取数据信息从<code>okhttp3</code><strong>网络请求模块</strong>中获取数据和服务每八小时<strong>网络请求模块</strong>获取一次数据。用户<strong>设置相关信息</strong>获取信息，<em>一种</em>从<strong>数据获取模块</strong>中寻找数据，<em>第二种</em>直接通过<code>okhttp3</code><strong>网络请求模块</strong>请求获取数据并存储在<strong>数据获取模块</strong>中，在从<strong>数据获取模块</strong>中获取数据，能保证天气数据实时，且能保证网络阻塞情况下，能从<strong>数据获取模块</strong>获得数据。<code>startService</code>保证长时间未更新数据情况下，采用上述<em>第二种</em>方式从<strong>数据获取模块</strong>获得实时数据。<strong>数据获取模块</strong>是一种较良好方式从<code>Http请求</code>中获得实时数据的一种存储方式。<strong>数据库适配器</strong>使用<code>Litepal</code>数据库框架映射数据库。存储地区信息等比较固定的信息，避免频繁从<strong>网络请求模块</strong>中获取数据。</p><h3 id="5-项目功能描述"><a href="#5-项目功能描述" class="headerlink" title="5.项目功能描述"></a>5.项目功能描述</h3><h4 id="（1）系统主要功能"><a href="#（1）系统主要功能" class="headerlink" title="（1）系统主要功能"></a>（1）系统主要功能</h4><ol><li>点击特定省份，城市和县来查看特定地区实时天气信息和服务信息</li><li>下拉刷新获取实时的天气信息和服务信息</li><li>后台服务，八小时自动跟新实时天气和服务信息</li><li>数据库存储地区信息，消除频繁去服务区获取数据</li><li>sharePreference存储天气信息，获取实时天气信息</li><li>获取每日一图，每日更换天气界面背景，获得好的用户体验</li></ol><h4 id="（2）系统各模块具体实现"><a href="#（2）系统各模块具体实现" class="headerlink" title="（2）系统各模块具体实现"></a>（2）系统各模块具体实现</h4><pre><code>工程源代码的结构如图</code></pre><p><img src="http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg" alt="项目结构"></p><pre><code>源代码文件的名称以及说明：</code></pre><table><thead><tr><th style="text-align:center">包名称</th><th style="text-align:center">文件名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>com.example.a13612.weather.db</code></td><td style="text-align:center"><code>City.java</code></td><td style="text-align:center">数据库表City映射模型</td></tr><tr><td style="text-align:center"><code>com.example.a13612.weather.db</code></td><td style="text-align:center"><code>County.java</code></td><td style="text-align:center">数据库表County映射模型</td></tr><tr><td style="text-align:center"><code>com.example.a13612.weather.db</code></td><td style="text-align:center"><code>Province.java</code></td><td style="text-align:center">数据库表Province映射模型</td></tr><tr><td style="text-align:center"><code>com.example.a13612.weather.gson</code></td><td style="text-align:center"><code>AQI.java</code></td><td style="text-align:center">天气数据<code>json</code>数据格式解析模型</td></tr><tr><td style="text-align:center"><code>com.example.a13612.weather.gson</code></td><td style="text-align:center"><code>Basic.java</code></td><td style="text-align:center">天气数据<code>json</code>数据格式解析模型</td></tr><tr><td style="text-align:center"><code>com.example.a13612.weather.gson</code></td><td style="text-align:center"><code>Forecast.java</code></td><td style="text-align:center">天气数据<code>json</code>数据格式解析模型</td></tr><tr><td style="text-align:center"><code>com.example.a13612.weather.gson</code></td><td style="text-align:center"><code>Now.java</code></td><td style="text-align:center">天气数据<code>json</code>数据格式解析模型</td></tr><tr><td style="text-align:center"><code>com.example.a13612.weather.gson</code></td><td style="text-align:center"><code>Suggestion.java</code></td><td style="text-align:center">天气数据<code>json</code>数据格式解析模型</td></tr><tr><td style="text-align:center"><code>com.example.a13612.weather.gson</code></td><td style="text-align:center"><code>Weather.java</code></td><td style="text-align:center">天气数据<code>json</code>数据格式解析模型</td></tr></tbody></table><pre><code>对应的json数据格式，采用gson解析</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"HeWeather"</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    "status":"ok",         //响应码</span><br><span class="line">    "basic":&#123;&#125;,            //地区信息</span><br><span class="line">    "aqi":&#123;&#125;,              //空气质量</span><br><span class="line">    "now":&#123;&#125;,              //今天天气预报</span><br><span class="line">    "suggestion": &#123;&#125;       //生活建议</span><br><span class="line">    "daily_forecast":[]    //未来几天天气预报</span><br><span class="line">  &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">包名称</th><th style="text-align:center">文件名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>com.example.a13612.weather.service</code></td><td style="text-align:center"><code>AutoUpdateService.java</code></td><td style="text-align:center">后台服务类，每八小时更新数据信息</td></tr><tr><td style="text-align:center"><code>com.example.a13612.weather.utils</code></td><td style="text-align:center"><code>HttpUtil.java</code></td><td style="text-align:center">服务器交互工具类，采用<code>okhttp3</code>网络通信库</td></tr><tr><td style="text-align:center"><code>com.example.a13612.weather.utils</code></td><td style="text-align:center"><code>Utility.java</code></td><td style="text-align:center">解析和处理从服务器返回<code>json</code>数据工具类</td></tr><tr><td style="text-align:center"><code>com.example.a13612.weather.ChooseAreaFragment</code></td><td style="text-align:center"><code>ChooseAreaFragment.java</code></td><td style="text-align:center">选择地区，来确定需要哪个地区天气信息</td></tr><tr><td style="text-align:center"><code>com.example.a13612.weather.WeatherActivity</code></td><td style="text-align:center"><code>WeatherActivity.java</code></td><td style="text-align:center">设置显示天气信息，加载天气界面</td></tr><tr><td style="text-align:center"><code>com.example.a13612.weather.MainActivity</code></td><td style="text-align:center"><code>MainActivity.java</code></td><td style="text-align:center">主活动，通过查看sharePreference是否存在数据来加载具体类,布局</td></tr></tbody></table><pre><code>Android的资源文件保存在/res的子目录中。其中,/res/layout/保存布局，/res/drawable/保存图片等信息    </code></pre><table><thead><tr><th style="text-align:center">资源目录</th><th style="text-align:center">文件</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>layout</code></td><td style="text-align:center"><code>activity_main.xml</code></td><td style="text-align:center">复用碎片<code>ChooseAreaFragment</code></td></tr><tr><td style="text-align:center"><code>layout</code></td><td style="text-align:center"><code>activity_weather.xml</code></td><td style="text-align:center">天气界面，inlucde多个布局文件，引入下拉，opendraw</td></tr><tr><td style="text-align:center"><code>layout</code></td><td style="text-align:center"><code>aqi.xml</code></td><td style="text-align:center">空气质量布局</td></tr><tr><td style="text-align:center"><code>layout</code></td><td style="text-align:center"><code>choose_area.xml</code></td><td style="text-align:center">选择地区布局</td></tr><tr><td style="text-align:center"><code>layout</code></td><td style="text-align:center"><code>forecast.xml</code></td><td style="text-align:center">多个天气预报布局</td></tr><tr><td style="text-align:center"><code>layout</code></td><td style="text-align:center"><code>forecast_item.xml</code></td><td style="text-align:center">单个天气预报item</td></tr><tr><td style="text-align:center"><code>layout</code></td><td style="text-align:center"><code>now.xml</code></td><td style="text-align:center">当前天气预报布局</td></tr><tr><td style="text-align:center"><code>layout</code></td><td style="text-align:center"><code>suggestion.xml</code></td><td style="text-align:center">生活建议不</td></tr><tr><td style="text-align:center"><code>layout</code></td><td style="text-align:center"><code>title.xml</code></td><td style="text-align:center">标题框布局</td></tr><tr><td style="text-align:center"><code>drawable</code></td><td style="text-align:center"><code>ic_back.png</code></td><td style="text-align:center">返回上一级地区按钮图片</td></tr><tr><td style="text-align:center"><code>drawable</code></td><td style="text-align:center"><code>ic_home.png</code></td><td style="text-align:center">实现在天气界面打开侧框选择地区界面</td></tr></tbody></table><pre><code>配置文件&lt;1&gt;项目所需的各种依赖库声明，具体配置文件app/build.gradle</code></pre><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deplencies&#123;</span><br><span class="line">      implementation <span class="string">'org.litepal.android:core:1.4.1'</span></span><br><span class="line">      implementation <span class="string">'com.squareup.okhttp3:okhttp:3.4.1'</span></span><br><span class="line">      implementation <span class="string">'com.google.code.gson:gson:2.7'</span></span><br><span class="line">      implementation <span class="string">'com.github.bumptech.glide:glide:3.7.0'</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><pre><code>作用：LitePal用于对数据库操作，OkHttp用于进行网络请求，GSON用于解析JSON数据，Glide用于加载图片和展示图片&lt;2&gt;LitePal配置文件，用于匹配映射数据库模型类，位于assets/litepal.xml</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">litepal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dbname</span> <span class="attr">value</span>=<span class="string">"weather"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"com.example.a13612.weather.db.Province"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"com.example.a13612.weather.db.City"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">"com.example.a13612.weather.db.County"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">litepal</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>作用：建立数据库：weather，创建数据库表Province,City,County&lt;3&gt;AndroidManifest.xml,进行权限声明，活动,服务注册，LitePal声明</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.example.a13612.weather"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--访问网络权限--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line">        &lt;!--LitePal声明--&gt;</span><br><span class="line">        android:name="org.litepal.LitePalApplication"</span><br><span class="line">        android:allowBackup="true"</span><br><span class="line">        android:icon="@mipmap/ic_launcher"</span><br><span class="line">        android:label="@string/app_name"</span><br><span class="line">        android:roundIcon="@mipmap/ic_launcher_round"</span><br><span class="line">        android:supportsRtl="true"</span><br><span class="line">        <span class="comment">&lt;!--设置主题为自己定义AppTheme主题，具体配置AppTheme请看res/values/styles.xml--&gt;</span></span><br><span class="line">        android:theme="@style/AppTheme"&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 指定当前活动能够响应的action和category --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".WeatherActivity"</span>&gt;</span><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".service.AutoUpdateService"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:enabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-数据提供者"><a href="#6-数据提供者" class="headerlink" title="6.数据提供者"></a>6.数据提供者</h3><pre><code>&lt;1&gt; 地区信息提供url接口： http://guolin.tech/api/china 提供所有省份信息 http://guolin.tech/api/china/&quot;+provinceCode 根据省份信息查找特定城市信息 http://guolin.tech/api/china/&quot;+provinceCode+&quot;/&quot;+cityCode 根据省份信息和特定城市信息查找特定地区信息&lt;2&gt;和风天气数据信息提供urL接口：&quot;http://47.90.126.26/api/weather?cityid=&quot;+weatherId+&quot;&amp;key=de25d114b80e43ed907cc1db97335395&quot;weatherId：具体特定地区信息提供key:http://guolin.tech/api/weather/register注册获取key&lt;3&gt;每日一图提供url接口：http://guolin.tech/api/bing_pc</code></pre><h3 id="7-系统界面"><a href="#7-系统界面" class="headerlink" title="7.系统界面"></a>7.系统界面</h3><p>​    </p><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-设计目的&quot;&gt;&lt;a href=&quot;#1-设计目的&quot; class=&quot;headerlink&quot; title=&quot;1. 设计目的&quot;&gt;&lt;/a&gt;1. 设计目的&lt;/h3&gt;&lt;p&gt;为了让广大&lt;code&gt;Android&lt;/code&gt;手机用户能够在第一时间获取最新天气预报消息，以便提前预
      
    
    </summary>
    
      <category term="android" scheme="http://log.xiaohaoming.com/categories/android/"/>
    
    
      <category term="android" scheme="http://log.xiaohaoming.com/tags/android/"/>
    
      <category term="project" scheme="http://log.xiaohaoming.com/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://log.xiaohaoming.com//2018/06/hello-world.html"/>
    <id>http://log.xiaohaoming.com//2018/06/hello-world.html</id>
    <published>2018-06-23T10:40:46.481Z</published>
    <updated>2018-06-15T05:07:10.002Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
